@using Travelitinerary.Client.Components
@inject HttpClient _client

<style>
    label, .validation-message {
        color: white; /* Set the color for labels and validation messages */
    }

    .form-control {
        color: black; /* Set the color for input boxes */
    }
</style>

<EditForm Model="@ItineraryActivity" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled">
    <div class="form-group">
        <label>Date Scheduled: </label>
        <div>
            <InputDate @bind-Value="@ItineraryActivity.DateScheduled" class="form-control" />
            <ValidationMessage For="@(() => ItineraryActivity.DateScheduled)" />
        </div>
    </div>
    <div class="form-group">
        <label>Created By: </label>
        <div>
            <InputText @bind-Value="@ItineraryActivity.CreatedBy" class="form-control" />
            <ValidationMessage For="@(() => ItineraryActivity.CreatedBy)" />
        </div>
    </div>
    <div class="form-group">
        <label>Updated By: </label>
        <div>
            <InputText @bind-Value="@ItineraryActivity.UpdatedBy" class="form-control" />
            <ValidationMessage For="@(() => ItineraryActivity.UpdatedBy)" />
        </div>
    </div>
    <div class="form-group">
        <label>Itinerary: </label>
            <InputSelect @bind-Value=ItineraryActivity.ItineraryId class="form-control">
            <option value="">-- Select Itinerary --</option>
            @if(Itineraries is not null)
            {
                foreach(var itinerary in Itineraries)
                {
                    <option value="@itinerary.Id">@itinerary.PackaageDetails</option>
                }
            }
                <ValidationMessage For="@(() => ItineraryActivity.ItineraryId)" />
        </InputSelect>
    </div>
    <div class="form-group">
        <label>Activity: </label>
        <InputSelect @bind-Value=ItineraryActivity.ActivityId class="form-control">
            <option value="">-- Select Activity --</option>
            @if(Activities is not null)
            {
                foreach (var activity in Activities)
                {
                    <option value="@activity.Id">@activity.Name</option>
                }
            }
            <ValidationMessage For="@(() => ItineraryActivity.ActivityId)" />
        </InputSelect>
    </div>

    </fieldset>


    <br />
    <br />

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="itineraryactivities"/>

</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public ItineraryActivity? ItineraryActivity { get; set; } = new();
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    List<Itinerary> Itineraries = new();
    List<Activity> Activities = new();

    protected async override Task OnInitializedAsync()
    {
        Itineraries = await _client.GetFromJsonAsync<List<Itinerary>>($"{Endpoints.ItineraryEndpoint}");
        Activities = await _client.GetFromJsonAsync<List<Activity>>($"{Endpoints.ActivityEndpoint}");
    }
}
