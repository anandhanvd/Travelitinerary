@page "/itineraryactivities"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable

<h3 class="card-title text-white">Itinerary Activities</h3>
<br />
<a href="/itineraryactivities/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Itinerary Activity
</a>
<br />
<br />

@if (ItineraryActivities == null)
{
    <div class="alert alert-info">Loading Itinerary Activities...</div>
}
else
{
    <!-- Itinerary Activities Table Section -->
    <table class="table table-responsive" id="itineraryactivitiesTable">
        <thead>
            <tr>
                <th>Id</th>
                <th>Date Scheduled</th>
                <th>Date Created</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var itineraryActivity in ItineraryActivities)
            {
                <!-- Individual Table Row -->
                <tr>
                    <td>@itineraryActivity.Id</td>
                    <td>@itineraryActivity.DateScheduled.ToString("dd MMM, yyyy")</td>
                    <td>@itineraryActivity.DateCreated.ToString("dd MMM, yyyy")</td>
                    <!-- Action Buttons -->
                    <td>
                        <a href="/itineraryActivities/view/@itineraryActivity.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/itineraryActivities/edit/@itineraryActivity.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(itineraryActivity.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ItineraryActivity>? ItineraryActivities;

    protected async override Task OnInitializedAsync()
    {
        ItineraryActivities = await _client.GetFromJsonAsync<List<ItineraryActivity>>($"{Endpoints.ItineraryActivityEndpoint}");
    }

    async Task Delete(int itineraryActivityId)
    {
        var itineraryActivity = ItineraryActivities.First(q => q.Id == itineraryActivityId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {itineraryActivity.Id}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.ItineraryActivityEndpoint}/{itineraryActivityId}");
            await OnInitializedAsync();
        }
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#itineraryactivitiesTable");
    }
    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#itineraryactivitiesTable");
    }
}
